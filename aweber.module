<?php
/* $Id$ */

/**
* @file
* Eases management of AWeber email list subscribers and Drupal users.
*/

define("AWEBER_SUBMITTED", 1); 
define("AWEBER_SUBSCRIBED", 2);
define("AWEBER_UNSUBSCRIBED", 0);
define("AWEBER_CHANGED", 3);
define("AWEBER_DELETED", 4);

/**
* Implementation of hook_menu()
*/
function aweber_menu() {
  $items = array();

  $items['aweberreturnpage'] = array(
    'title' => 'AWeber return',
    'page callback' => 'aweber_return_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  $items['admin/user/aweber'] = array(
    'title' => 'AWeber',
    'page callback' => 'aweber_overview',
    'description' => 'Overview of AWeber leads and integration settings',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/user/aweber/list'] = array(
    'title' => 'Leads',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/user/aweber/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aweber_configure'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/user/aweber/edit/%aweber_lead'] = array(
    'title' => 'Edit lead status',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aweber_lead_edit_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK
  );
  $items['admin/user/aweber/delete/%aweber_lead'] = array(
    'title' => 'Delete lead',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('aweber_lead_delete_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
* Configuration settings form
*/
function aweber_configure() {
  $form = array();

  $form['aweber_account'] = array(
    '#type' => 'fieldset',
    '#title' => t('AWeber List'),
    '#description' => t('Required settings for use of the module.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['aweber_account']['aweber_list'] = array(
    '#type' => 'textfield',
    '#title' => t('List'),
    '#description' => t('The list name users will be subscribing to. AWeber calls this the "unit".'),
    '#default_value' => variable_get('aweber_list', ''),
    '#required' => TRUE
  );
  $form['aweber_account']['aweber_id'] = array(
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#description' => t('The web form ID. AWeber calls this the "meta_web_form_id".'),
    '#default_value' => variable_get('aweber_id', ''),
    '#required' => TRUE
  );

  $form['aweber_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('Account Integration'),
    '#description' => t('Allow users to sign-up during registration and control subscribing and unsubscribing through their account settings.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['aweber_user']['aweber_user_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Integrate on account form.'),
    '#description' => t('Place sign-up option on registration and account edit pages.'),
    '#default_value' => variable_get('aweber_user_form', 1)
  );
  $form['aweber_user']['aweber_registration_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Set checkbox on registration to checked.'),
    '#description' => t('By default the registration checkbox is not checked. Check this box to sign leads up by default.'),
    '#default_value' => variable_get('aweber_registration_default', 0)
  );
  $form['aweber_user']['aweber_option_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#description' => t('The text to go alongside the sign-up checkbox.'),
    '#default_value' => variable_get('aweber_option_text', 'Sign up for our newsletter.')
  );

  $form['aweber_thanks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Thank You Page'),
    '#description' => t('A Thank You page which records leads is provided if you use the built in block.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['aweber_thanks']['aweber_thanks_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#description' => t('The text to display on the Thank You page.'),
    '#default_value' => variable_get('aweber_thanks_message', 'Thank you for subscribing! You will receive a confirmation message in your email.')
  );

  return system_settings_form($form);
}

function aweber_lead_edit_form($aweber_lead) {
  $form['mail'] = array(
    '#type' => 'markup',
    '#value' => '<p>' . check_plain($aweber_lead->mail) . '</p>',
  );
  $form['lead'] = array(
    '#type' => 'value',
    '#value' => $aweber_lead,
  );
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => aweber_format_status(),
    '#default_value' => $aweber_lead->status,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function aweber_lead_edit_form_submit($form, &$form_state) {
  aweber_update_lead_status($form_state['values']['status'], $form_state['values']['lead']->uid);
  $form_state['redirect'] = 'admin/user/aweber';
}

function aweber_lead_delete_form($aweber_lead) {
  $form['lead'] = array(
    '#type' => 'hidden',
    '#value' => $aweber_lead
  );

  return confirm_form(
    $form,
    t('Really delete this lead?'),
    'admin/user/aweber',
    t('This cannot be undone. Note that this does not delete the user account.'),
    t('Delete'),
    t('Cancel')
  );
}

function aweber_lead_delete_form_submit($form, &$form_state) {
  $lead = $form_state['values']['lead'];
  $account = user_load(array('uid' => $lead->uid));
  if ($account->uid) {
    $account->aweber_signup = 0;
    user_save($account, array('aweber_signup' => 0));
  }

  db_query("DELETE FROM {aweber} WHERE aid = %d", $aid);
  drupal_set_message(t('Lead was deleted.'));
  $form_state['redirect'] = 'admin/user/aweber';
}

function aweber_lead_load($aid) {
  $result = db_query('SELECT * FROM {aweber} WHERE aid = %d', $aid);
  return db_fetch_object($result);
}

/**
* AWeber web form
*/
function aweber_web_form() {
  global $base_url;
  global $user;
  $form = array();

  $form['aweber']['meta_web_form_id'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('aweber_id', '')
  );
  $form['aweber']['meta_split_id'] = array(
    '#type' => 'hidden',
    '#value' => ''
  );
  $form['aweber']['unit'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('aweber_list', '')
  );
  $form['aweber']['redirect'] = array(
    '#type' => 'hidden',
    '#value' => url('aweberreturnpage', array('absolute' => TRUE))
  );
  $form['aweber']['meta_redirect_onlist'] = array(
    '#type' => 'hidden',
    '#value' => ''
  );
  $form['aweber']['meta_adtracking'] = array(
    '#type' => 'hidden',
    '#value' => ''
  );
  $form['aweber']['meta_message'] = array(
    '#type' => 'hidden',
    '#value' => '1'
  );
  $form['aweber']['meta_required'] = array(
    '#type' => 'hidden',
    '#value' => 'from'
  );
  $form['aweber']['meta_forward_vars'] = array(
    '#type' => 'hidden',
    '#value' => '1'
  );

  $form['aweber']['from'] = array(
    '#type' => 'textfield',
    '#size' => '20',
    '#default_value' => $user->uid ? check_plain($user->mail) : ''
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#name' => 'submit'
  );

  $form['#action'] = 'http://www.aweber.com/scripts/addlead.pl';

  return $form;
}

/**
* Implementation of hook_block()
*/
function aweber_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  switch ($op) {
    case 'list':
      $blocks['aweber_form'] = array('info' => t('AWeber Sign-up Form'));
      return $blocks;

    case 'configure':
      $form['aweber_block_text'] = array(
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#description' => t('Text to display above the form.'),
        '#default_value' => variable_get('aweber_block_text', '')
      );
      return $form;

    case 'save':
      variable_set('aweber_block_text', $edit['aweber_block_text']);
      break;

    case 'view':
      if ($delta == 'aweber_form' && ($user->uid == 0 || $user->aweber_signup == 0)) {
        $block['subject'] = t('Newsletter');
        if (variable_get('aweber_block_text', '') != '') {
          $block['content'] = theme('aweber_block_text', variable_get('aweber_block_text', ''));
          $block['content'] .= drupal_get_form('aweber_web_form');
        }
        else {
          $block['content'] = drupal_get_form('aweber_web_form');
        }
        return $block;
      }
      break;
  }
}

/**
* Parse the return variables from AWeber
*/
function _aweber_parse_get() {
  $data = array();

  if (!empty($_GET['from']) && !empty($_GET['unit'])) {
    $data['from'] = $_GET['from'];
    $data['unit'] = urldecode($_GET['unit']);
    $data['meta_web_form_id'] = urldecode($_GET['meta_web_form_id']);
  }

  return $data;
}

/**
* Callback given to AWeber as the thank you page
* does a drupal_goto to the actual thank you page to avoid duplicate _aweber_save_lead()s
*/
function aweber_return_page() {
  global $user;

  if (variable_get('aweber_thanks_save', 1)) {
    $data = _aweber_parse_get();

    if (empty($data)) {
      watchdog('aweber', 'Unable to parse and save variables returned by AWeber sign-up submit.', array(), WATCHDOG_ERROR);
    }
    else {
      _aweber_save_lead($data);
      if ($user->uid) {
        $user->aweber_signup = 1; // keep our insert hook from resubmitting
        user_save($user, array('aweber_signup' => 1));
      }
    }
  }
  
  if (variable_get('aweber_thank_you_path', '') != '') {
    drupal_goto('aweberty');
  }
  else {
    return filter_xss_admin(variable_get('aweber_thanks_message', t('Thank you for subscribing!')));
  }
}

/**
* Insert a lead
*/
function _aweber_save_lead($data, $uid = NULL) {
  global $user;

  if ($user->uid || $uid) {
    $uid = $user->uid ? $user->uid : $uid;
    db_query("INSERT INTO {aweber} (uid, mail, status, list, id, timestamp) VALUES (%d, '%s', %d, '%s', %d, %d)", $uid, $data['from'], AWEBER_SUBMITTED, $data['unit'], $data['meta_web_form_id'], time());
  }
  else {
    db_query("INSERT INTO {aweber} (mail, status, list, id, timestamp) VALUES ('%s', %d, '%s', %d, %d)", $data['from'], AWEBER_SUBMITTED, $data['unit'], $data['meta_web_form_id'], time());
  }

  watchdog('aweber', 'New AWeber lead @mail', array('@mail' => $data['from']), WATCHDOG_NOTICE);
}

/**
* Overview page of leads
*/
function aweber_overview() {
  $items[] = t('Submitted: User has begun the signup process. You should check if they followup on the AWeber confirmation by checking your list on aweber.com.');
  $items[] = t('Subscribed: Mark a lead as subscribed once they have confirmed subscription on aweber.com');
  $items[] = t('Changed: If a user alters their email address here on the site you should update their subscription on aweber.');
  $output = theme('item_list', $items, t('Status Legend'));

  $header = array(
    array('data' => t('Address'), 'field' => 'mail'),
    array('data' => t('User')),
    array('data' => t('Status'), 'field' => 'status'),
    array('data' => t('Added'), 'field' => 'timestamp'),
    array('data' => t('Operations'), 'colspan' => '1')
  );

  $sql = 'SELECT * FROM {aweber}';
  $result = pager_query($sql . tablesort_sql($header), 50);
  $rows = array();
  while ($data = db_fetch_object($result)) {
    $rows[] = array(
      array('data' => check_plain($data->mail)),
      array('data' => $data->uid ? theme('username', user_load(array('uid' => $data->uid))) : ''),
      array('data' => aweber_format_status($data->status)),
      array('data' => format_date($data->timestamp, 'custom', 'D, M Y g:ia')),
      array('data' => l(t('edit'), 'admin/user/aweber/edit/'. $data->aid)),
      array('data' => l(t('delete'), 'admin/user/aweber/delete/'. $data->aid))
    );
  }

  if ($rows) {
    $pager = theme('pager', NULL, 50, 0);
    $output .= '<h3>'. t('Leads') .'</h3>'; 
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= t('There are no leads.'); 
  }

  return $output;
}

function aweber_format_status($status = NULL) {
  $map = array(
    AWEBER_SUBMITTED => t('Submitted'),
    AWEBER_SUBSCRIBED => t('Subscribed'),
    AWEBER_UNSUBSCRIBED => t('Unsubscribed'),
    AWEBER_CHANGED => t('Changed'),
    AWEBER_DELETED => t('Deleted')
  );
  return is_null($status) ? $map : $map[$status];
}

/**
* Implementation of hook_user()
*/
function aweber_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'register':
      if (variable_get('aweber_user_form', 0) && variable_get('aweber_id', '') != '') {
        $form['aweber'] = array(
          '#type' => 'fieldset',
          '#title' => t('Newsletter'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE
        );
        $form['aweber']['aweber_signup'] = array(
          '#type' => 'checkbox',
          '#title' => filter_xss_admin(variable_get('aweber_option_text', t('Sign up for our newsletter.'))),
          '#default_value' => variable_get('aweber_registration_default', 0),
        );
        return $form;
      }
      break;
    case 'form':
      if (variable_get('aweber_user_form', 0) && variable_get('aweber_id', '') != '' && $category == 'account') {
        $form['aweber'] = array(
          '#type' => 'fieldset',
          '#title' => t('Newsletter'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE
        );
        $form['aweber']['aweber_signup'] = array(
          '#type' => 'checkbox',
          '#title' => filter_xss_admin(variable_get('aweber_option_text', t('Sign up for our newsletter.'))),
          '#default_value' => !empty($account->aweber_signup) ? $account->aweber_signup : 0,
        );
        return $form;
      }
      break;
    case 'update':
      if (isset($edit['mail']) && $edit['mail'] != $account->mail && $account->aweber_signup == 1) {
        aweber_update_mail($edit['mail'], $account->uid);
      }
      // purposefully fall through
    case 'insert':
      if (isset($edit['aweber_signup']) && $edit['aweber_signup'] == 1 && $account->aweber_signup == 0) {
        aweber_form_post($account->mail, $account->uid);
      }
      else if (isset($edit['aweber_signup']) && $edit['aweber_signup'] == 0 && $account->aweber_signup == 1) {
        aweber_update_lead_status(AWEBER_UNSUBSCRIBED, $account->uid);
      }
      break;
    case 'delete':
      if ($account->aweber_signup == 1) {
        aweber_update_lead_status(AWEBER_DELETED, $account->uid);
      }
      break;
  }
}

function aweber_update_mail($mail, $uid) {
  db_query("UPDATE {aweber} SET mail = '%s', status = %d WHERE uid = %d", $mail, AWEBER_CHANGED, $uid);
}

function aweber_update_lead_status($status, $uid) {
  db_query('UPDATE {aweber} SET status = %d WHERE uid = %d', $status, $uid);
}

/**
* Automatic signup post to AWeber
*/
function aweber_form_post($from, $uid) {
  $data = array(
    'from' => $from,
    'meta_web_form_id' => variable_get('aweber_id', ''),
    'meta_split_id' => '',
    'unit' => variable_get('aweber_list', ''),
    'redirect' => 'http://www.aweber.com/form/thankyou_vo.html',
    'meta_redirect_onlist' => '',
    'meta_adtracking' => '',
    'meta_message' => '1',
    'meta_required' => 'from',
    'meta_forward_vars' => '0'
  );

  $url = 'http://www.aweber.com/scripts/addlead.pl';
  // the magic! 
  drupal_http_request($url, array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8'), 'POST', http_build_query($data, '', '&'));

  _aweber_save_lead($data, $uid);
}

/**
 * Implementation of hook_theme().
 */
function aweber_theme() {
  return array(
    'aweber_block_text' => array(
      'arguments' => array('text' => NULL),
    ),
  );
}

/**
* Theme text shown above form block
*/
function theme_aweber_block_text($text) {
  return t('<p>@text</p>', array('@text' => $text));
}
